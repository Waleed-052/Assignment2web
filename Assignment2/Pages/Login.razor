@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks
@using Assignment2.Models
@using Microsoft.Extensions.DependencyInjection
@using Assignment2.Data
@page "/login"
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}


<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="InputEmail">Email address</label>
        <InputText id="InputEmail" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="InputPassword">Password</label>
        <InputText id="InputPassword" class="form-control" type="password" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private string errorMessage;
    private LoginModel loginModel = new LoginModel();

    private async Task HandleValidSubmit()
    {
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, isPersistent: false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            var user = await SignInManager.UserManager.FindByEmailAsync(loginModel.Email);

            if (await SignInManager.UserManager.IsInRoleAsync(user, "Manager"))
            {
                NavigationManager.NavigateTo("/Employeehtml");
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
        @inject IServiceProvider serviceProvider

        var dbContext = serviceProvider.GetRequiredService<AppDbContext>();
        var userCredentials = dbContext.UserCredentials.FirstOrDefault(u => u.Email == loginModel.Email && u.Password == loginModel.Password);

        if (userCredentials != null)
        {
            NavigationManager.NavigateTo("/Employeehtml");
        }
        else
        {
            // Authentication failed, handle the error or display an error message
            // Add your logic to handle authentication failure here
        }

    }
    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}


